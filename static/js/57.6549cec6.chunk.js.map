{"version":3,"file":"static/js/57.6549cec6.chunk.js","mappings":"sPAYA,MCVA,EDUkCA,KAChC,MAAMC,GAAWC,EAAAA,EAAAA,aAAYC,EAAAA,GACvBC,GAAeF,EAAAA,EAAAA,aAAYG,EAAAA,IAC3BC,GAAWC,EAAAA,EAAAA,eACXC,GAAkBN,EAAAA,EAAAA,aAAYO,EAAAA,IAC9BC,GAAcR,EAAAA,EAAAA,aAAYS,EAAAA,IAC1BC,GAAgBV,EAAAA,EAAAA,aAAYW,EAAAA,IAE5BC,GAAgBC,EAAAA,EAAAA,cAAY,KAChC,GAAIH,IAAkBI,EAAAA,EAAYC,QAAS,CACzC,MAAMC,EAAWR,EAAc,EAC/BJ,GAASa,EAAAA,EAAAA,GAAcD,GACzB,IACC,CAACZ,EAAUM,EAAeF,IAqB7B,OAnBAU,EAAAA,EAAAA,YAAU,IACD,KACLd,GAASe,EAAAA,EAAAA,KAA0B,GAAO,GAE3C,CAACf,KAEJc,EAAAA,EAAAA,YAAU,KAEI,OAARnB,QAAQ,IAARA,GAAAA,EAAUqB,QAEZhB,GAASiB,EAAAA,EAAAA,IAAetB,EAASqB,QACnC,GACC,CAAChB,KAEJc,EAAAA,EAAAA,YAAU,KAERI,SAASC,MAAK,sBAAAC,OAAyBzB,EAASqB,OAAM,IAAG,GACxD,CAACrB,KAGF0B,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,WAAWC,EAAAA,EAAAA,GAAE,CAAEC,cAAc,IAAQL,UAClC,OAAZzB,QAAY,IAAZA,OAAY,EAAZA,EAAc+B,WACbL,EAAAA,EAAAA,KAACM,EAAAA,EAAmB,CAClB1B,YAAaA,EACbF,gBAAiBA,EACjBiB,MAAM,gBACNY,OAAQjC,EAAa+B,QACrBG,cAAexB,OAIrBgB,EAAAA,EAAAA,KAACS,EAAAA,EAAS,MACT,C","sources":["pages/Search/Search.tsx","pages/Search/index.ts"],"sourcesContent":["import React, { FunctionComponent, useCallback, useEffect } from 'react';\n\nimport AppContent from 'components/ui/AppContent';\nimport AppFooter from 'components/partials/AppFooter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getSearchContent, getSearchPage, getSearchStatus, hasMorePages } from 'store/search/selectors';\nimport { AppCardInfinityList } from 'components/ui/AppCardList';\nimport { b } from 'components/ui/AppContent/AppContent';\nimport { FetchStatus } from 'common/types/fetch-status';\nimport { setSearchPage, setSearchQuery, toggleSearchBarVisibility } from 'store/search/actions';\nimport { getCurrentLocation } from 'store/router/selectors';\n\nconst Search: FunctionComponent = () => {\n  const location = useSelector(getCurrentLocation);\n  const searchResult = useSelector(getSearchContent);\n  const dispatch = useDispatch();\n  const hasMoreElements = useSelector(hasMorePages);\n  const currentPage = useSelector(getSearchPage);\n  const requestStatus = useSelector(getSearchStatus);\n\n  const loadMoreCards = useCallback(() => {\n    if (requestStatus !== FetchStatus.PENDING) {\n      const nextPage = currentPage + 1;\n      dispatch(setSearchPage(nextPage));\n    }\n  }, [dispatch, requestStatus, currentPage]);\n\n  useEffect(() => {\n    return () => {\n      dispatch(toggleSearchBarVisibility(false));\n    };\n  }, [dispatch]);\n\n  useEffect(() => {\n    // @ts-ignore\n    if (location?.search) {\n      // @ts-ignore\n      dispatch(setSearchQuery(location.search));\n    }\n  }, [dispatch]);\n\n  useEffect(() => {\n    // @ts-ignore\n    document.title = `Search result for \"${location.search}\"`;\n  }, [location]);\n\n  return (\n    <>\n      <AppContent className={b({ withPaddings: true })}>\n        {searchResult?.results && (\n          <AppCardInfinityList\n            currentPage={currentPage}\n            hasMoreElements={hasMoreElements}\n            title='Search Result'\n            movies={searchResult.results}\n            onLoadHandler={loadMoreCards}\n          />\n        )}\n      </AppContent>\n      <AppFooter />\n    </>\n  );\n};\n\nexport default Search;\n","import Search from 'pages/Search/Search';\n\nexport default Search;\n"],"names":["Search","location","useSelector","getCurrentLocation","searchResult","getSearchContent","dispatch","useDispatch","hasMoreElements","hasMorePages","currentPage","getSearchPage","requestStatus","getSearchStatus","loadMoreCards","useCallback","FetchStatus","PENDING","nextPage","setSearchPage","useEffect","toggleSearchBarVisibility","search","setSearchQuery","document","title","concat","_jsxs","_Fragment","children","_jsx","AppContent","className","b","withPaddings","results","AppCardInfinityList","movies","onLoadHandler","AppFooter"],"sourceRoot":""}